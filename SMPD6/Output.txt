> library("neuralnet")
> 
> #Going to create a neural network to perform prediction
> #Type ?neuralnet for more information on the neuralnet library
> 
> #Generate training data
> #And store them as a dataframe
> traininginput <- as.data.frame(matrix(c(1296000,8,128,
+                                         4096000,8,128,
+                                         4096000,8,128,
+                                         4096000,8,256,
+                                         1296000,8,256,
+                                         3317760,8,256,
+                                         4096000,8,256,
+                                         3317760,8,256,
+                                         3317760,8,256,
+                                         3317760,8,512,
+                                         5184000,16,512,
+                                         4096000,16,256), nrow=12, ncol=3))
> trainingoutput <- c(3779, 5599, 5699, 6899, 5199, 5899, 6799, 6499, 5999, 7199, 12899, 9399)
> 
> #Column bind the data into one variable
> trainingdata <- cbind(traininginput, trainingoutput)
> 
> # Create Vector of Column Max and Min Values
> maxs <- apply(trainingdata[,], 2, max)
> mins <- apply(trainingdata[,], 2, min)
> 
> # Use scale() and convert the resulting matrix to a data frame
> scaled.trainingdata <- as.data.frame(scale(trainingdata[,], center=mins, scale=maxs-mins))
> trainingdata <- scaled.trainingdata
> 
> # Check out results
> print(head(trainingdata, 10))
                 V1               V2                V3 trainingoutput
1  0.31640491485335 0.31640491485335 0.639999444443587   0.0000000000
2  0.00000000000000 0.00000000000000 0.000000000000000   0.1995614035
3  0.00002929693222 0.00006054699326 0.000047839579999   0.2105263158
4  1.00000000000000 0.80999962890553 0.639999444443587   0.3421052632
5  0.00000000000000 0.00000000000000 0.000000000000000   0.1557017544
6  0.00002929693222 0.00006054699326 0.000097222372257   0.2324561404
7  1.00000000000000 1.00000000000000 1.000000000000000   0.3311403509
8  0.00000000000000 0.00000000000000 0.000001543212258   0.2982456140
9  0.00002929693222 0.00006054699326 0.000097222372257   0.2434210526
10 1.00000000000000 0.80999962890553 0.790123132906069   0.3750000000
> 
> colnames(trainingdata) <- c("Ekran", "Ram", "Dysk", "Cena") 
> print(trainingdata)
              Ekran              Ram              Dysk         Cena
1  0.31640491485335 0.31640491485335 0.639999444443587 0.0000000000
2  0.00000000000000 0.00000000000000 0.000000000000000 0.1995614035
3  0.00002929693222 0.00006054699326 0.000047839579999 0.2105263158
4  1.00000000000000 0.80999962890553 0.639999444443587 0.3421052632
5  0.00000000000000 0.00000000000000 0.000000000000000 0.1557017544
6  0.00002929693222 0.00006054699326 0.000097222372257 0.2324561404
7  1.00000000000000 1.00000000000000 1.000000000000000 0.3311403509
8  0.00000000000000 0.00000000000000 0.000001543212258 0.2982456140
9  0.00002929693222 0.00006054699326 0.000097222372257 0.2434210526
10 1.00000000000000 0.80999962890553 0.790123132906069 0.3750000000
11 0.00000000000000 0.00000000000000 0.000001543212258 1.0000000000
12 0.00006054699326 0.00006054699326 0.000047839579999 0.6162280702
> 
> #Train the neural network
> #Going to have C(5, 4, 3) hidden layers
> #Threshold is a numeric value specifying the threshold for the partial
> #derivatives of the error function as stopping criteria.
> net.price <- neuralnet(Cena~Ram+Ekran+Dysk, trainingdata, hidden=c(3, 4, 3), threshold=0.001)
> print(net.price)
$`call`
neuralnet(formula = Cena ~ Ram + Ekran + Dysk, data = trainingdata, 
    hidden = c(3, 4, 3), threshold = 0.001)

$response
           Cena
1  0.0000000000
2  0.1995614035
3  0.2105263158
4  0.3421052632
5  0.1557017544
6  0.2324561404
7  0.3311403509
8  0.2982456140
9  0.2434210526
10 0.3750000000
11 1.0000000000
12 0.6162280702

$covariate
                  [,1]             [,2]              [,3]
 [1,] 0.31640491485335 0.31640491485335 0.639999444443587
 [2,] 0.00000000000000 0.00000000000000 0.000000000000000
 [3,] 0.00006054699326 0.00002929693222 0.000047839579999
 [4,] 0.80999962890553 1.00000000000000 0.639999444443587
 [5,] 0.00000000000000 0.00000000000000 0.000000000000000
 [6,] 0.00006054699326 0.00002929693222 0.000097222372257
 [7,] 1.00000000000000 1.00000000000000 1.000000000000000
 [8,] 0.00000000000000 0.00000000000000 0.000001543212258
 [9,] 0.00006054699326 0.00002929693222 0.000097222372257
[10,] 0.80999962890553 1.00000000000000 0.790123132906069
[11,] 0.00000000000000 0.00000000000000 0.000001543212258
[12,] 0.00006054699326 0.00006054699326 0.000047839579999

$model.list
$model.list$`response`
[1] "Cena"

$model.list$variables
[1] "Ram"   "Ekran" "Dysk" 


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x0000000005813528>
<environment: 0x000000000bf86808>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x000000000580f090>
<environment: 0x000000000bf86808>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
              Ekran              Ram              Dysk         Cena
1  0.31640491485335 0.31640491485335 0.639999444443587 0.0000000000
2  0.00000000000000 0.00000000000000 0.000000000000000 0.1995614035
3  0.00002929693222 0.00006054699326 0.000047839579999 0.2105263158
4  1.00000000000000 0.80999962890553 0.639999444443587 0.3421052632
5  0.00000000000000 0.00000000000000 0.000000000000000 0.1557017544
6  0.00002929693222 0.00006054699326 0.000097222372257 0.2324561404
7  1.00000000000000 1.00000000000000 1.000000000000000 0.3311403509
8  0.00000000000000 0.00000000000000 0.000001543212258 0.2982456140
9  0.00002929693222 0.00006054699326 0.000097222372257 0.2434210526
10 1.00000000000000 0.80999962890553 0.790123132906069 0.3750000000
11 0.00000000000000 0.00000000000000 0.000001543212258 1.0000000000
12 0.00006054699326 0.00006054699326 0.000047839579999 0.6162280702

$net.result
$net.result[[1]]
             [,1]
1  0.001718414858
2  0.369229191217
3  0.369081029018
4  0.360749968963
5  0.369229191217
6  0.368983711872
7  0.337056615006
8  0.369226150840
9  0.368983711872
10 0.351466107130
11 0.369226150840
12 0.369081994348


$weights
$weights[[1]]
$weights[[1]][[1]]
              [,1]          [,2]           [,3]
[1,] -0.3695676556 -0.2154517524 -0.04173076298
[2,] 10.4801505966 11.4124493429  2.57659018296
[3,]  6.2287139085  6.1006231638  5.17309322443
[4,] 10.6182057555  8.7714280623 -5.34662621475

$weights[[1]][[2]]
              [,1]           [,2]          [,3]          [,4]
[1,]  0.4994855615  0.07316670706  0.4855907605 -0.3835741219
[2,] -1.5428567918 -0.94086345471  0.9574131978 -0.4489213518
[3,] -1.6326664930 -1.53049939980 -0.3288802370  0.1814470140
[4,]  1.8085429777 -0.87140773518 -3.1966625621 -1.8200437441

$weights[[1]][[3]]
              [,1]          [,2]          [,3]
[1,]  0.1175727524  0.2045389172 -0.8436361104
[2,] -0.6185267382  0.5393317998 -1.2880624127
[3,] -0.3081327550 -0.1978380219 -0.4206609004
[4,]  0.1820086808 -1.4900681658  2.8990902211
[5,]  0.6120691010  1.1268551728 -0.1972823892

$weights[[1]][[4]]
              [,1]
[1,]  0.9329089994
[2,] -1.6374320843
[3,]  0.6461736831
[4,] -0.4158120396



$startweights
$startweights[[1]]
$startweights[[1]][[1]]
             [,1]          [,2]          [,3]
[1,] 0.1503723781  0.0720651368  1.7545217752
[2,] 0.1801505966  1.1124493429 -0.1249735739
[3,] 1.1939701865  0.9698864728  1.6120045730
[4,] 0.3182057555 -1.5285719377  0.3432109560

$startweights[[1]][[2]]
              [,1]           [,2]          [,3]          [,4]
[1,]  0.5673665528  0.09582729776  1.0004581558  0.1200144601
[2,] -1.3592658435 -0.37255924394  1.4404284060 -0.5042925344
[3,] -1.4490755446 -0.96654167916  0.3622192276  0.2868101849
[4,] -0.1772806524 -1.09326732238 -1.7328016047 -1.3137045720

$startweights[[1]][[3]]
              [,1]          [,2]          [,3]
[1,] -0.2679657577  0.5900774272 -0.9468174173
[2,] -0.5015135758  0.4223186373 -1.1987910075
[3,] -0.4923962633 -0.0139163561 -0.4053029389
[4,] -0.8769682149 -0.4310912700  1.1480227408
[5,]  0.2492368854  1.4923571953 -0.3264335908

$startweights[[1]][[4]]
               [,1]
[1,]  1.31844750953
[2,] -1.25189357423
[3,]  1.01576810395
[4,]  0.02966542201



$generalized.weights
$generalized.weights[[1]]
              [,1]           [,2]            [,3]
1  159.38090105892 320.0139983962 -330.7709818595
2   -3.88621189213   0.1329849946   -8.4592775042
3   -3.88787634175   0.1327155729   -8.4623264588
4    0.08521742093   0.1710934525   -0.1768328532
5   -3.88621189213   0.1329849946   -8.4592775042
6   -3.88876865198   0.1327591444   -8.4643688948
7    0.34804933620   0.6987885287   -0.7222296032
8   -3.88623983393   0.1329863126   -8.4593413570
9   -3.88876865198   0.1327591444   -8.4643688948
10   0.18797034347   0.3773933969   -0.3900531779
11  -3.88623983393   0.1329863126   -8.4593413570
12  -3.88797933446   0.1325979288   -8.4622989256


$result.matrix
                                      1
error                   0.2994304866094
reached.threshold       0.0004441245138
steps                 104.0000000000000
Intercept.to.1layhid1  -0.3695676555754
Ram.to.1layhid1        10.4801505965961
Ekran.to.1layhid1       6.2287139085226
Dysk.to.1layhid1       10.6182057554826
Intercept.to.1layhid2  -0.2154517524061
Ram.to.1layhid2        11.4124493429477
Ekran.to.1layhid2       6.1006231637963
Dysk.to.1layhid2        8.7714280622620
Intercept.to.1layhid3  -0.0417307629807
Ram.to.1layhid3         2.5765901829602
Ekran.to.1layhid3       5.1730932244318
Dysk.to.1layhid3       -5.3466262147529
Intercept.to.2layhid1   0.4994855615041
1layhid.1.to.2layhid1  -1.5428567918258
1layhid.2.to.2layhid1  -1.6326664929507
1layhid.3.to.2layhid1   1.8085429776610
Intercept.to.2layhid2   0.0731667070573
1layhid.1.to.2layhid2  -0.9408634547116
1layhid.2.to.2layhid2  -1.5304993998022
1layhid.3.to.2layhid2  -0.8714077351762
Intercept.to.2layhid3   0.4855907604800
1layhid.1.to.2layhid3   0.9574131978274
1layhid.2.to.2layhid3  -0.3288802370160
1layhid.3.to.2layhid3  -3.1966625621242
Intercept.to.2layhid4  -0.3835741218911
1layhid.1.to.2layhid4  -0.4489213518052
1layhid.2.to.2layhid4   0.1814470139938
1layhid.3.to.2layhid4  -1.8200437441480
Intercept.to.3layhid1   0.1175727523531
2layhid.1.to.3layhid1  -0.6185267382168
2layhid.2.to.3layhid1  -0.3081327550129
2layhid.3.to.3layhid1   0.1820086808253
2layhid.4.to.3layhid1   0.6120691009797
Intercept.to.3layhid2   0.2045389171582
2layhid.1.to.3layhid2   0.5393317997722
2layhid.2.to.3layhid2  -0.1978380219498
2layhid.3.to.3layhid2  -1.4900681657767
2layhid.4.to.3layhid2   1.1268551728332
Intercept.to.3layhid3  -0.8436361104018
2layhid.1.to.3layhid3  -1.2880624126596
2layhid.2.to.3layhid3  -0.4206609004372
2layhid.3.to.3layhid3   2.8990902211400
2layhid.4.to.3layhid3  -0.1972823891771
Intercept.to.Cena       0.9329089994492
3layhid.1.to.Cena      -1.6374320843153
3layhid.2.to.Cena       0.6461736830628
3layhid.3.to.Cena      -0.4158120396263

attr(,"class")
[1] "nn"
> 
> #Plot the neural network
> plot(net.price)
> 
> #Test the neural network on some training data
> testdata <- as.data.frame(matrix(c(1583, 8135, 6421,
+                                    2000, 8460, 1500,
+                                    1712, 9445, 1819), nrow=3, ncol=3))
> scaled.testdata <- as.data.frame(scale(testdata[,], center=mins[1:3], scale=maxs[1:3]-mins[1:3]))
> net.results <- compute(net.price, scaled.testdata) #Run them through the neural network
> 
> #Lets see what properties net.price has
> ls(net.results)
[1] "net.result" "neurons"   
> 
> #Lets see the results
> print(net.results$net.result)
             [,1]
[1,] 0.3682477093
[2,] 0.3638876859
[3,] 0.3671310469
> 